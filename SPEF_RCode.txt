# R Code for managing SPEF Context Factors, Practice Adherence, and Outcome Measures
# Should there be a Jupyter notebook?
# Rule to implement: have R code reference database tables in ‘standard’ schema, not csv’s

# install.packages(‘dplyr’)
library(dplyr)
# install.packages(‘lubridate’)
library(lubridate)
# install.packages(‘ggplot2’)
library(ggplot2)
# install.packages(‘ggthemes’)
library(ggthemes)

setwd("/Users/admin/github/SPEFTools.rb/pma")

# projectdate Normalizes to ProjectMonth (probably should be called that)
projectdate <- function(date) { floor_date(date,"month") + months(1) }

# projCLOC <- load_cloc(dbname) - Build data frame from cloc data
# Run extract_sloc, load datafile in to sqlite database, note database name

dbname = "phpMyAdmin_cloc_db"

#load_cloc <- function(dbname)
#{
    clocdb <- src_sqlite(dbname)
    cloct<- tbl(clocdb, sql("SELECT * FROM t where Language in ('Java','Javascript,','Ruby','YAML','Bourne Shell','Bourne Again Shell') "))
    tdf <- as.data.frame(cloct,n=-1)

    # split column from cloc input into project name, project month
    matchPoint <- regexpr("*___",tdf[1,]$Project)-1
    tdf$ProjectMonth <- projectdate(as.Date(substr(tdf$Project,matchPoint+4,matchPoint+14)))
    tdf$Project <- substr(tdf$Project,1,matchPoint)
#    return(tdf)
#}

# Read in the project data
projCLOC <- tdf
clocbyProjectMonth <- group_by(tdf,ProjectMonth)
projSLOC <- summarize(clocbyProjectMonth,SLOC=sum(nCode))
projSLOCRow <- summarize(clocbyProjectMonth,Factor="SLOC",Value=sum(nCode))


projCommitsData <- read.csv("commits.txt",sep=";",col.names=c("hash","date","author","email","added","changed","pathname"))
projCommitsData$date <- as.Date(projCommitsData$date)
projCommitsData$ProjectMonth <- projectdate(projCommitsData$date)
projCommitsData$added <- as.numeric(projCommitsData$added)
projCommitsData$changed <- as.numeric(projCommitsData$changed)
projCommitsData$author <- as.character(projCommitsData$author)
projCommitsData$email <- as.character(projCommitsData$email)


# mdf <- projCommits

CommitsByProjectMonth <- group_by(projCommitsData,ProjectMonth)
projCommits <- as.data.frame(summarize(CommitsByProjectMonth,cfCommits=length(unique(hash))))
projCommitsRow <- data.frame(ProjectMonth=projCommits$ProjectMonth,Factor="Commits",Value=projCommits$cfCommits)

projChurn <- as.data.frame(summarize(CommitsByProjectMonth,cfChurn=sum(added+changed)))
projChurnRow <- data.frame(ProjectMonth=projChurn$ProjectMonth,Factor="Churn",Value=projChurn$cfChurn)

projDevs <- as.data.frame(summarize(CommitsByProjectMonth,cfDevs=length(unique(author))))
projDevsRow <- data.frame(ProjectMonth=projDevs$ProjectMonth,Factor="Devs",Value=projDevs$cfDevs)


#	addVariable(dfMain, dfVariable, variable) 
# 	Add new metric/time series to data frame holding main data for reporting
#		dfMain: ProjectMonth, previous list of metrics added
#		dfVariable: ProjectMonth, Project
#		normalize dfVariable date?
#		merge(dfSPEF, dfVariable) 
#		if needed, add cumulative column for variable

# extractedSeries <- ovcPMA[ovcPMA$BugType=="Vulnerability",c("CreationDate","BugType")]
# normalize dfVariable date?
# extractedSeries$ProjectMonth <-projectdate(ymd(extractedSeries$CreationDate))
# extractedSeries$N = as.integer(1)
# byextractedProjectMonth <- group_by(extractedSeries,ProjectMonth)
# dataSeries <- as.data.frame(summarize(byextractedProjectMonth,omV=sum(N)))

# Result (grainDate, Metric):
#    ProjectMonth     V
#         (time) (int)
# 1    2005-03-01     1



# Adding a column variable to the main data frame
# mdf <- merge(projCLOC,dataSeries,all.x=TRUE)
# mdf$omV <- ifelse(is.na(mdf$omV), 0, mdf$omV)
# mdf$omVC <- cumsum(mdf$omV)

# Generating spdf rows for partial data, cumulative data
projCLOC$ProjectMonth <- as.Date(projCLOC$ProjectMonth)

spdf <- projSLOCRow
spdf <- rbind(spdf,projCommitsRow)
spdf <- rbind(spdf,projChurnRow)
spdf <- rbind(spdf,projDevsRow)

# generate one column data frame containing all project months
projTimeline <- unique(as.data.frame(projCommits[c("ProjectMonth")],drop=FALSE))
# Needs $ProjectMonth: projTimeline <- seq(from=as.Date("2001-05-01"), to=as.Date("2015-11-01"),by='month')


# plotting practice keyword counts from issues
projIssues <- read.csv("issues.csv",header=TRUE,row.names=NULL)
ggplot(data=pmaC[as.Date(projIssues$ProjectMonth) %in% seq(from=as.Date("2005-01-01"), to=as.Date("2014-04-01"),by='month'),],aes(x=ProjectMonth)) + geom_bar(aes(y=..count..,group=Practice),position=position_dodge()) + facet_grid(Practice~.) + theme_tufte() + theme(strip.text.y = element_text(angle=0))

# plotting practice keyword counts from emails
projEmails <- read.csv("emails.csv",header=TRUE,row.names=NULL)
ggplot(data=pmaC[as.Date(projEmails$ProjectMonth) %in% seq(from=as.Date("2005-01-01"), to=as.Date("2014-04-01"),by='month'),],aes(x=ProjectMonth)) + geom_bar(aes(y=..count..,group=Practice),position=position_dodge()) + facet_grid(Practice~.) + theme_tufte() + theme(strip.text.y = element_text(angle=0))

# 
# Proxy for publically-reported vulnerabilities: emails containing the security advisory abbreviation
projEmails$N = 1
EmailsByProjectMonth <- group_by(projEmails[projEmails$Topic == " PMASA?",],ProjectMonth)
projVulns <- summarize(EmailsByProjectMonth,Factor="Vulns",Value=sum(N))
projVulns$ProjectMonth <- as.Date(projVulns$ProjectMonth)

# align partial data with project timeline
projV <- merge(projTimeline,projVulns,all.x=TRUE)
projV$Value <- ifelse(is.na(projV$Value), 0, projV$Value)
projV$Factor <- ifelse(is.na(projV$Factor), "Vulns", projV$Factor)
projV$ProjectMonth <- as.Date(projV$ProjectMonth)
# cumulative
projVC <- projV
projVC$Factor <- "TotalVulns"
projVC$Value <- cumsum(projVC$Value)
projVC$ProjectMonth <- as.Date(projVC$ProjectMonth)

# computing a new Factor/Value combination from existing Factor/Values
projCLOC$ProjectMonth <- as.Date(projCLOC$ProjectMonth)
tmpSeries <- merge(projSLOC,projVC)
tmpSeries$Value <- tmpSeries$Value/(tmpSeries$SLOC/1000)
tmpSeries$Factor <- "VDensity"
tmpSeries <- tmpSeries[c("ProjectMonth","Factor","Value")]
# tmpSeries$ProjectMonth <- as.Date(tmpSeries$ProjectMonth)
# projSeriesRow <- data.frame(ProjectMonth=tmpSeries$ProjectMonth,Factor="Devs",Value=projDevs$cfDevs)
spdf <- rbind(spdf,tmpSeries)

# plotting an outcome measure and some context factors
ggplot(data=spdf[as.Date(spdf$ProjectMonth) %in% seq(from=as.Date("2001-04-01"), to=as.Date("2014-04-01"),by='month') & spdf$Factor %in% c("VDensity","Churn","Commits","Devs","SLOC"),]) + geom_line(aes(x=ProjectMonth,y=Value,group=Factor)) + facet_grid(Factor~.,scales="free_y") + theme(strip.text.y = element_text(angle=0))


